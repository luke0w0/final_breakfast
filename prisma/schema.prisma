generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "foreignKeys"
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String
  role          Role
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  notifications Notification[]
  orders        Order[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MenuItem {
  id          String      @id @default(cuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  isAvailable Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
}

model Order {
  id            String         @id @default(cuid())
  customerId    String
  status        OrderStatus    @default(PENDING)
  totalAmount   Float
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  paymentStatus Boolean        @default(false)
  completedAt   DateTime?
  notifications Notification[]
  customer      User           @relation(fields: [customerId], references: [id])
  items         OrderItem[]
}

model OrderItem {
  id             String   @id @default(cuid())
  orderId        String
  menuItemId     String
  quantity       Int      @default(1)
  specialRequest String?
  createdAt      DateTime @default(now())
  menuItem       MenuItem @relation(fields: [menuItemId], references: [id])
  order          Order    @relation(fields: [orderId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  orderId   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  CUSTOMER
  STAFF
  CHEF
  OWNER
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  COMPLETED
  CANCELLED
}
